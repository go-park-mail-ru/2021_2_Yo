syntax = "proto3";

//export PATH=$PATH:$HOME/go/bin
//export PATH=$PATH:/usr/local/go/bin
//export PATH=$PATH:/home/comradyo/go
//protoc --go_out=plugins=grpc:. *.proto
//PATH="${PATH}:${HOME}/go/bin" protoc --go_out=plugins=grpc:. *.proto

option go_package = "/eventGrpc";
package eventGrpc;

message Event {
    string ID = 1;
    string Title = 2;
    string Description = 3;
    string Text = 4;
    string City = 5;
    string Category = 6;
    int32 Viewed = 7;
    string ImgUrl = 8;
    repeated string Tag = 9;
    string Date = 10;
    string Geo = 11;
    string Address = 12;
    string AuthorId = 13;
    bool IsVisited = 14;
}

message EventId {
    string ID = 1;
}

message AuthorId {
    string ID = 1;
}

message UserId {
    string ID = 1;
}

message UpdateEventRequest {
    Event event = 1;
    string userId = 2;
}

message DeleteEventRequest {
    string eventId = 1;
    string userId = 2;
}

message GetEventsRequest {
    string userId = 1;
    string title = 2;
    string category = 3;
    string city = 4;
    string date = 5;
    repeated string tags = 6;
}

message Events {
    repeated Event events = 1;
}

message VisitRequest {
    string eventId = 1;
    string userId = 2;
}

message IsVisitedRequest {
    bool Result = 1;
}

message GetCitiesRequest {
    repeated string Cities = 1;
}

message Empty {}

service EventService {
    rpc CreateEvent(Event) returns (EventId) {}
    rpc UpdateEvent(UpdateEventRequest) returns (Empty) {}
    rpc DeleteEvent(DeleteEventRequest) returns (Empty) {}
    rpc GetEventById(EventId) returns (Event) {}
    rpc GetEvents(GetEventsRequest) returns (Events) {}
    rpc GetVisitedEvents(UserId) returns (Events) {}
    rpc GetCreatedEvents(UserId) returns (Events) {}
    rpc Visit(VisitRequest) returns (Empty) {}
    rpc Unvisit(VisitRequest) returns (Empty) {}
    rpc IsVisited(VisitRequest) returns (IsVisitedRequest) {}
    rpc GetCities(Empty) returns (GetCitiesRequest) {}
}