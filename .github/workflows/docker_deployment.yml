name: CI/CD

env:
  SERVER_TAG: latest
  AUTH_TAG: latest
  EVENT_TAG: latest
  USER_TAG: latest

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: DockerHub Authorization
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER}} --password-stdin
      - name: Build Docker Server
        run: docker build -t ${{ secrets.DOCKER_USER}}/server:${{ env.SERVER_TAG }} --target server-build .
      - name: Build Docker Auth-Service
        run: docker build -t ${{ secrets.DOCKER_USER}}/auth:${{ env.AUTH_TAG }} --target auth-build .
      - name: Build Docker Event-Service
        run: docker build -t ${{ secrets.DOCKER_USER}}/event:${{ env.EVENT_TAG }} --target event-build .
      - name: Build Docker User-Service
        run: docker build -t ${{ secrets.DOCKER_USER}}/user:${{ env.USER_TAG }} --target user-build .
      - name: Push Docker Server
        run: docker push  ${{ secrets.DOCKER_USER}}/server:${{ env.SERVER_TAG }} 
      - name: Push Docker Auth-Service
        run: docker push  ${{ secrets.DOCKER_USER}}/auth:${{ env.AUTH_TAG }} 
      - name: Push Docker Event-Service
        run: docker push  ${{ secrets.DOCKER_USER}}/event:${{ env.EVENT_TAG }} 
      - name: Push Docker User-Service
        run: docker push  ${{ secrets.DOCKER_USER}}/user:${{ env.USER_TAG }} 

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Pull Server Image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: sudo docker pull ${{ secrets.DOCKER_USER }}/server:${{ env.SERVER_TAG }}
      - name: Pull Auth Image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: sudo docker pull ${{ secrets.DOCKER_USER }}/auth:${{ env.SERVER_TAG }}
      - name: Pull Event Image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: sudo docker pull ${{ secrets.DOCKER_USER }}/event:${{ env.SERVER_TAG }}
      - name: Pull User Image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: sudo docker pull ${{ secrets.DOCKER_USER }}/user:${{ env.SERVER_TAG }}

  start:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Start App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/bmstusa/backend
            sudo docker volume create --name=grafana-storage
            git pull
            sudo docker-compose down
            sudo docker rmi $(docker images -q)
            sudo docker-compose up -d
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v1
        with:
          go-version: 1.17
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Install golangci-lint
        run: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.40.0
      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: download webp lib
        run: sudo apt-get install libwebp-dev
      - name: Coverage
        run: go test -cover -coverprofile=cover.out -coverpkg=./... ./...
      - name: Exclude directories
        run: cat cover.out | fgrep -v "main.go" | fgrep -v "mock.go" | fgrep -v "pb.go" | fgrep -v "response_easyjson.go" > cover1.out